<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="470" height="330" minWidth="470" minHeight="330" backgroundColor="#62E8E0"
			   initialize="initApp();">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import spark.events.IndexChangeEvent;
			
			import my.*;
			
			private var nc: NetConnection;
			private var ns: NetStream;
			private var video: Video;

			private var cam: Camera;
			private var mic: Microphone;
			
			private var vparam: VideoItemParameter;
			private var vstate: int = 0; // 0-空闲  1-播放中  2-直播发布中  3-上传文件发布中
			
			private var cam_timer: uint;
			private var cam_counter: uint = 0;
			
			public var myAudioRate : ArrayCollection = new ArrayCollection([
				{label : '44,100 Hz', data : 44}, 
				{label : '22,050 Hz', data : 22}, 
				{label : '11,025 Hz', data : 11}, 
				{label : '8,000 Hz', data : 8}, 
				{label : '5,512 Hz', data : 5}
			]);
			
			public var myAudioQuality : ArrayCollection = new ArrayCollection([
				{label : '3.95KB/s', data : 0}, {label : '5.75KB/s', data : 1}, 
				{label : '7.75KB/s', data : 2}, {label : '9.80KB/s', data : 3}, 
				{label : '12.8KB/s', data : 4}, {label : '16.8KB/s', data : 5}, 
				{label : '20.6KB/s', data : 6}, {label : '23.8KB/s', data : 7}, 
				{label : '27.8KB/s', data : 8}, {label : '34.2KB/s', data : 9}, 
				{label : '42.2KB/s', data : 10}
			]);
			
			public var myAudioCodec : ArrayCollection = new ArrayCollection([
				{label : 'Nellymoser', data : 'Nellymoser'},
				{label : 'Speex', data : 'Speex'}
			]);
			
			private function initApp(): void{

				FlexGlobals.topLevelApplication.addEventListener(MouseEvent.ROLL_OUT, setSRF);
				
				vparam = readParameters();
				initUI();				
				initFuncs();
				doConnect();
			}
			
			public function doConnect(): void{
				nc = new NetConnection();
				nc.client = new NCClientObject(this);
				nc.objectEncoding = ObjectEncoding.AMF3;
				nc.addEventListener(NetStatusEvent.NET_STATUS, nc_OnStatus);
				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, nc_OnAsyncError);
				nc.connect(vparam.getAppURL(), vparam.sid, vparam.uid, vparam.rid);
				debug("connect:" + vparam.getAppURL() + " sid:" + vparam.sid + " uid:" + vparam.uid + " rid:" + vparam.rid);
			}
			
			public function doDisconnect(): void {
				doStop();
				if(nc && nc.connected){
					nc.close();
				}
				nc = null;
			}
					
			public function doPlay() : void {
				if (vstate != 0) return;
				debug("doPlay");
				
				doView(this.vparam.getStreamName());
			}
			
			public function doStop(): void{
				if(vstate == 0) return;
				
				debug("doStop");
				
				if(ns){
					if(vstate == 2){
						ns.attachCamera(null);
						ns.attachAudio(null);
					}
					ns.close();	
				}
				video.attachNetStream(null);
				video.visible = false;
				
				vstate = 0;
				ExternalInterface.call("room.onVideoUnpublish");
			}
			
			//JS调用
			public function doSendMsg(msgData :Object): void {
				nc.call("sendMsg", null, msgData);
			}
			
			public function doSendGift(propid: int, count: int, to: String): void {
				nc.call("sendGift", null, propid, count, to);
			}
			
			public function doBan(uid: String): void{
				nc.call("ban", null, uid);
			}
			//
			
			public function initPublicBar(show:Boolean): void {
				debug("showPublishBar:" + show);
				if(show) {
					this.addEventListener(MouseEvent.ROLL_OVER, function(): void{
						panl.visible = true;
					});
					this.addEventListener(MouseEvent.ROLL_OUT, function(): void{
						panl.visible = false;
					})
				}				
			}
			
			private function doPublish(cameraName : String, 
									   microphoneIndex : int, 
									   videoByte : int, 
									   videoQuality : int, 
									   keyFrameInterval : int, 
									   fps : int,
									   audioQuality : int,
									   audioCodec : String,
									   audioRate : int,
									   audioSilenceLevel : int): void {
				
				debug("video:" + videoQuality + 
					" audio:" + audioQuality + 
					" videoByte:" + videoByte + 
					" videoQuality:" + videoQuality + 
					" keyFrameInterval:" + keyFrameInterval + 
					" audioQuality:" +  audioQuality + 
					" audioCodec:" + audioCodec + 
					" audioRate:" + audioRate + 
				    " audioSilenceLevel:" + audioSilenceLevel);
				
				if(!nc.connected){
					Alert.show('尚未连接');
					return;
				}
				if(vstate != 0) return; // 当前正在发布和播放
				
				// 检查摄像头
				cam = Camera.getCamera(cameraName);
				if(cam == null){
					Alert.show('获取摄像头失败:' + cameraName);
					return;
				}
				cam.setMode(470, 330, fps);
				cam.setQuality(videoByte*1024, videoQuality);
				cam.setKeyFrameInterval(keyFrameInterval);
				cam.addEventListener(StatusEvent.STATUS, cam_onStatus);
				
				mic = Microphone.getMicrophone(microphoneIndex);
				if (mic == null) {
					Alert.show('获取麦克风失败:' + microphoneIndex);
					return;					
				}
				mic.encodeQuality = audioQuality;
				mic.setSilenceLevel(audioSilenceLevel);
				if (audioCodec == "Nellymoser") {
					mic.codec = SoundCodec.NELLYMOSER;
					mic.rate = audioRate;
				}
				else {
					mic.codec = SoundCodec.SPEEX;
				}
				
				
				var h264Settings:H264VideoStreamSettings = new H264VideoStreamSettings();
				h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_5_1);
				h264Settings.setMode(470, 330, fps);
				h264Settings.setQuality(videoByte*1024, videoQuality);
				h264Settings.setKeyFrameInterval(keyFrameInterval);
				
				ns = new NetStream(nc);
				ns.attachCamera(cam);
				ns.attachAudio(mic);
				ns.addEventListener(NetStatusEvent.NET_STATUS, ns_onStatus);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, ns_onSyncErr);
				ns.videoStreamSettings = h264Settings;
				ns.publish(vparam.getStreamName(), "live");
				
				video.attachCamera(cam);
				video.visible = true;
				
				vstate = 2;
				
				ExternalInterface.call("room.onVideoPublish");
			}
			//直播
			private function doView(streamName: String): void{
				setTimeout(function(): void{
					debug("doView:" + streamName);
					ns = new NetStream(nc);
					// 非直播时，缓冲
					ns.bufferTime = streamName != vparam.getStreamName() ? 1 : 0;
					ns.client = new NSClientObject();
					ns.addEventListener(NetStatusEvent.NET_STATUS, ns_onStatus);
					ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, ns_onSyncErr);
					ns.play(streamName);
					video.attachNetStream(ns);
					video.visible = true;
					
					vstate = 1;
					ExternalInterface.call("room.onVideoPublish");
				}, 500); // 延迟1秒播放，避免看到以前的图片
			}
			//播放文件流媒体
			private function doPublishView(streamName: String): void{
				if(!nc.connected){
					Alert.show('尚未连接');
					return;
				}
				if(vstate != 0) return; // 当前正在发布和播放
				
				ns = new NetStream(nc);
				// 非直播时，缓冲
				ns.bufferTime = 1;
				ns.client = new NSClientObject();
				ns.addEventListener(NetStatusEvent.NET_STATUS, ns_onStatus);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, ns_onSyncErr);
				ns.play(streamName, 0);
				video.attachNetStream(ns);
				video.visible = true;
				
				vstate = 3;
				
				ExternalInterface.call("room.onVideoPublish");
			}

			////////////////// event		
			private function doConnectSuccess(): void{
				ExternalInterface.call("room.onConnectSuccess");
				nc.call("checkVideo", null);
				/* 带宽检测
				nc.call("checkBandwidth", null);
				*/
			}
			
			private function doConnectFailed(): void{
				ExternalInterface.call("room.onConnectFailed");
			}
			
			private function doConnectRejected(resp: Object): void{
				var msg: String = "";
				ExternalInterface.call("room.onConnectRejected", resp);
			}
			
			private function doConnectClosed(): void{
				ExternalInterface.call("room.onConnectClosed");
				doStop();
			}
			
			private function nc_OnStatus(evt: NetStatusEvent): void{
				debug(evt.info.code + " protocol:" + nc.protocol + " connectedProxyType:" + nc.connectedProxyType);
				switch(evt.info.code){
					case "NetConnection.Connect.Success":
						doConnectSuccess();
						break;
					case "NetConnection.Connect.Rejected":
						doConnectRejected(evt.info.application);
						break;
					case "NetConnection.Connect.Failed":
						doConnectFailed();
						break;
					case "NetConnection.Connect.Closed":
						doConnectClosed();
						break;
					case "NetConnection.Connect.AppShutDown":
						break;
				}
			}
			
			private function nc_OnAsyncError(evt: AsyncErrorEvent): void {
			}
			
			private function ns_onStatus(evt: NetStatusEvent): void{
				// 循环播放：如果碰到播放结束，并且不是直播时，跳回到第一帧
				if(evt.info.code == "NetStream.Play.Stop"){
					if(vstate == 3){
						ns.seek(0);
					}
				}
			}
			
			private function ns_onSyncErr(evt: AsyncErrorEvent): void {
			}
									
			private function cam_onStatus(evt: StatusEvent): void {
				if(evt.code == "Camera.Muted"){
					doStop();
				}
				else if(evt.code == "Camera.Unmuted"){
					// 如果摄像头被占用，调用doStop
					cam_counter = 0;
					cam_timer = setInterval(checkCamCallBack, 100);
				}
			}
			
			private function checkCamCallBack(): void {
				cam_counter++;
				if(cam.currentFPS > 0){
					clearInterval(cam_timer);
				}
				else{
					if(cam_counter >= 20){
						clearInterval(cam_timer);
						doStop();
					}
				}
			}
			
			
			private function readParameters(): VideoItemParameter {
				var ret: VideoItemParameter = new VideoItemParameter();
				var params: Object = FlexGlobals.topLevelApplication.parameters;
				ret.sid = params.sid;
				ret.appname = params.appname;
				ret.sip = params.sip;
				ret.uid = params.uid;
				ret.rid = params.rid;
				return ret;
			}
						
			private function initUI(): void{
				// initUI
				video = new Video();
				video.smoothing = true;
				video.visible = false;
				video.width = 470;
				video.height = 330;
				container.addChild(video);				
			}
			
			private function initFuncs(): void{
				ExternalInterface.addCallback("doConnect", doConnect);
				ExternalInterface.addCallback("doDisconnect", doDisconnect);
				ExternalInterface.addCallback("doSendMsg", doSendMsg);
				ExternalInterface.addCallback("doSendGift", doSendGift);
				ExternalInterface.addCallback("doBan", doBan);
			}
						
			private function setSRF(event:MouseEvent):void {
				if(Capabilities.hasIME){
					try{
						if(!IME.enabled){
							IME.enabled=true;
						}
						IME.conversionMode = IMEConversionMode.CHINESE;
					}
					catch(error:Error){
					}
				}
				
			}
			
			public function debug(msg: String):void {
				ExternalInterface.call("room.debug", msg);
			}		

			/////////////////////////
			
			protected function btnPublish_clickHandler(event:MouseEvent):void
			{
				if (Camera.names.length == 0) {
					Alert.show("未检测到摄像头");
					return;
				}
				if (Microphone.names.length == 0) {
					Alert.show("未检测到麦克风");
					return;
				}
				
//				if (Camera.names.length == 1 && Microphone.names.length == 0) {
//					doPublish("0", 0);
//					return;
//				}
				
				var cameras:Array = new Array();
				for (var i:String in Camera.names) {
					cameras.push({label : Camera.names[i], data : i});
				} 
				videoList.dataProvider = new ArrayCollection(cameras);
				videoList.selectedIndex = 0;
				
				var audios:Array = new Array();;
				for (i in Microphone.names) {
					audios.push({label : Microphone.names[i], data : i});
				}
				audioList.dataProvider = new ArrayCollection(audios);
				audioList.selectedIndex = 0;
				
				audioQuality.dataProvider = new ArrayCollection([
					{label : "自动", data : 0}
				]);	
				audioQuality.selectedIndex = 0;
								
				deviceChoosePanel.visible = true;
			}
			
			protected function btnConfirm_clickHandler(event:MouseEvent):void
			{
				doPublish(
					videoList.selectedItem.data, 
					audioList.selectedItem.data, 
					parseInt(videoByte.text),
					parseInt(videoQuality.text),
					parseInt(keyFrameInterval.text),
					parseInt(fps.text),
					audioQuality.selectedItem.data,
					audioCodec.selectedItem.data,
					audioRate.selectedItem.data,
					parseInt(audioSilenceLevel.text)
				);
				deviceChoosePanel.visible = false;
			}
			
			protected function btnStop_clickHandler(event:MouseEvent):void
			{
				if(vstate == 2 || vstate == 3){
					doStop();
				}
			}
			
			private function changeAudioCodec(e:IndexChangeEvent) : void{
				if (audioCodec.selectedItem.data == 'Nellymoser') {
					audioRate.dataProvider = myAudioRate;
					audioRate.selectedIndex = 2;
					
					audioQuality.dataProvider = new ArrayCollection([
						{label : "自动", data : 0}
					]);	
					audioQuality.selectedIndex = 0;
				}
				else {
					audioRate.dataProvider = new ArrayCollection([
						{label : "16,000HZ", data : 0}
					]);	
					audioRate.selectedIndex = 0;
					
					audioQuality.dataProvider = myAudioQuality;
					audioQuality.selectedIndex = 6;
				}
			}
						
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:SpriteVisualElement id="container" x="0" y="0" width="470" height="330"></s:SpriteVisualElement>
	<s:Panel id="panl" visible="false" left="0" top="0" width="470" height="22"
			 backgroundAlpha="0.0" borderVisible="true" dropShadowVisible="false" enabled="true"
			 skinClass="spark.skins.spark.SkinnableContainerSkin">
		<s:Button id="btnPublish" x="0" y="0" width="60" label="发布" click="btnPublish_clickHandler(event)"/>
		<s:Button id="btnStop" x="60" width="60" label="停止" click="btnStop_clickHandler(event)"/>
	</s:Panel>
	<s:Panel x="10" y="9" width="450" height="310" title="请选择合适的配置" id="deviceChoosePanel" visible="false">
		<s:DropDownList id="videoList" x="61" y="40" width="126"></s:DropDownList>
		<s:DropDownList id="audioList" x="266" y="40" width="122"></s:DropDownList>
		<s:Label x="110" y="15" text="视频"/>
		<s:Label x="314" y="16" text="音频"/>
		<s:Button x="368" y="246" label="确定" id="deviceChooseBtn" click="btnConfirm_clickHandler(event)"/>
		<s:Label x="61" y="90" text="最大带宽:"/>
		<s:TextInput id="videoByte" x="116" y="87" width="31" borderVisible="false"
					 fontFamily="Arial" fontStyle="normal" fontWeight="normal" text="60"
					 textDecoration="none"/>
		<s:Label x="150" y="92" text="KB/s"/>
		<s:Label x="244" y="132" height="13" text="质量:"/>
		<s:DropDownList id="audioQuality" x="288" y="125" width="100"></s:DropDownList>
		<s:Label x="61" y="133" text="质量(0~100):"/>
		<s:TextInput x="139" y="129" width="37" borderVisible="false" text="0" id="videoQuality"/>
		<s:Label x="61" y="168" text="关键帧间隔(1~48秒):"/>
		<s:TextInput x="180" y="165" width="32" borderVisible="false" text="48" id="keyFrameInterval"/>
		<s:Label x="244" y="90" text="编码:"/>
		<s:DropDownList x="288" y="83" width="100" id="audioCodec" dataProvider="{myAudioCodec}" selectedIndex="0" change="changeAudioCodec(event)"></s:DropDownList>
		<s:Label x="221" y="168" text="采样频率:"/>
		<s:DropDownList x="288" y="164" width="100" id="audioRate" dataProvider="{myAudioRate}" selectedIndex="2"></s:DropDownList>
		<s:Label x="221" y="205" width="52" text="静音级别(0~100):"/>
		<s:TextInput x="288" y="212" width="50" borderVisible="false" text="10" id="audioSilenceLevel"/>
		<s:Label x="62" y="212" text="帧速:"/>
		<s:TextInput x="98" y="208" width="33" borderVisible="false" text="20" id="fps"/>
	</s:Panel>
</s:Application>
