load("conf.js");
load("netservices.asc");

function mytrace(s){
	trace(s);
}

application.getUserInfoByUid = function(uid){
	if (!this.loginUsers[uid]) {return null};
	var ret = {};
	for (var i in this.loginUsers[uid]['data']) {
		ret[i] = this.loginUsers[uid]['data'][i];
	};
	ret.client = this.loginUsers[uid];
	return ret;
}

application.onAppStart = function(){
	this.loginUsers = {};
	this.isPlaying = false;
	NetServices.setDefaultGatewayUrl(ServerURL);
	this.rid = this.name.substring(this.name.indexOf('_') + 1);

	var service = application.getService("ChatService", this);
	this.getRoomInfo_Result = function(resp) {
		if (resp.errno) {
			mytrace('getRoomInfo error:' + resp.errno + '|' + resp.msg);
			application.shutdown();
			return;
		}
		mid = resp.data.mid;
		mytrace('room mid:' + mid);

		var moderator = application.loginUsers[mid];
		if (moderator) {
			moderator.call('onShowPublicBar', null);
		}

	}
	this.getRoomInfo_Status = function(result) {
		mytrace('getRoomInfo_Status level:' + result.level + ' description:' + result.description);
		application.shutdown();
	}
	this.dispatchDeadUser_Result = function(resp) {
		if (resp.errno) {
			mytrace('dispatch dead user error:' + resp.errno + '|' + resp.msg);
			application.shutdown();
			return;
		};
		var users = resp.data;
		mytrace('dipatch dead user num:' + users.length);
		for (var i in users) {
			var client = {data : users[i]};
			application.loginUsers[users[i].uid] = client;	
		};

		application.broadcastMsg("onInitRoom",  application.getUserList());
	}
	this.dispatchDeadUser_Status = function(result) {
		mytrace('dispatchDeadUser_Status level:' + result.level + ' description:' + result.description);
		application.shutdown();
	}
	service.getRoomInfo(this.rid);
	service.dispatchDeadUser(this.rid);
}

application.onAppStop = function(info) {
	mytrace('app stop');
	var service = application.getService("ChatService", this);
	this.returnDeadUser_Result = function(resp) {
		if (resp.errno) {
			mytrace('returnDeadUser error:' + resp.errno + '|' + resp.msg);
		};
		mytrace('returnDeadUser success');
	}
	this.returnDeadUser_Status = function(result) {
		mytrace('returnDeadUser_Status level:' + result.level + ' description:' + result.description);
	}
	var user_ids = [];
	for (var uid in this.loginUsers) {
		var user = this.loginUsers[uid].data;
		if (user.type == 4) {
			user_ids.push(user.uid);
		};
	};
	service.returnDeadUser(this.rid, user_ids);	
}

application.onPublish = function(client, stream){
	mytrace('pub mid:' + client.data.uid);
	this.isPlaying = true;
	this.broadcastMsg('onPublish');
}

application.onUnpublish = function(client, stream){
	mytrace('unpub: ' + stream.name);
	this.isPlaying = false;
	this.broadcastMsg('onUnpublish');
}

application.onStatus = function(info){
	mytrace('code: ' + info.code + ' level: ' + info.level + ' description:' + info.description);
}

application.getService = function(serviceName, obj){
	var conn = NetServices.createGatewayConnection();
	return conn.getService(serviceName, obj);
}

application.onConnect = function(client, sid, uid, rid) {
	mytrace('onConnect session:' + sid + ' uid:' + uid + " rid:" + rid);
	if (uid == -1) {//未登录
		client.data = {uid : uid, fid : client.id};
		application.doLoginOK(client);
		return;
	}
	// 重复登录问题
	if(this.loginUsers[uid]){
		mytrace('replogin uid:' + uid);
		application.disconnect(this.loginUsers[uid]);
	}
	var service = application.getService("ChatService", this);
	var userInfo;
	// 获取用户身份
	this.getUserInfo_Result = function(resp){
		if(resp.errno){
			// 无效用户
			mytrace('getUserInfo error:' + resp.errno + '|' + resp.msg);
			//会调用onDisconnect
			application.rejectConnection(client, {errno : 103});
			return;
		}
		else{
			userInfo = resp.data;
			client.data = {
				sid : sid, uid : userInfo.id
			};
			for (var k in userInfo) {
				client.data[k] = userInfo[k];
			};
			mytrace("uid:" + userInfo.id + " nickname:" + userInfo.nickname + " sex:" + userInfo.sex + " role:" + userInfo.role + " headPic:" + userInfo.headPic + " logoutMsg:" + userInfo.logoutMsg);
			// 普通用户
			if(userInfo.role == 1){
				// 检查人数限制
				if(application.clients.length >= userInfo.roomMaxUser){
					mytrace('maxuser');
					application.rejectConnection(client,  {errno : 101});
					return;
				}
				else{
					if(!userInfo.allowIn) {//禁止进入
						mytrace('uid:' + userInfo.id + ' not allow');
						application.rejectConnection(client, {errno : 102});
						return;					
					}
				}
			}
			else{ // 主持人和管理员
				mytrace('admin onLogin uid:' + userInfo.id);
			}
		}
		application.doLoginOK(client);
	}
	this.getUserInfo_Status = function(info){
		mytrace('getUserInfo_Status level:' + info.level + ' description:' + info.description);
		application.rejectConnection(client, {errno : 104, msg : 'getUserInfo_Status level:' + info.level + ' description:' + info.description});
	}
	service.getUserInfo(sid, uid, rid);
}

application.doLoginOK = function(client){
	mytrace('doLoginOK uid:' + client.data.uid);
	this.broadcastMsg("onLogin", client.data);
	// 接受新用户登录
	this.acceptConnection(client);
	// 更新用户昵称映射表
	if (client.data.uid != -1) {
		this.loginUsers[client.data.uid] = client;
	}
	
	client.call("onInitRoom", null,  this.getUserList());
	if (client.data.uid == mid) {
		client.call("onShowPublicBar", null);
	}

}

application.onDisconnect = function(client){
	//rejectConnection引起的disconnect没有data
	if (!client.data) return;

	mytrace('onDisconnect uid:' + client.data.uid);
	if (client.data.uid == mid) { //主播
		this.broadcastMsg('onUnpublish');
	}
	
	delete this.loginUsers[client.data.uid];

	application.broadcastMsg("onLogout", client.data);
}


Client.prototype.sendMsg = function(msgData){
	mytrace("sendMsg to:" + msgData.to + " msg:" + msgData.msg + " from:" + this.data.uid + " private:" + msgData.private);
	if(msgData.msg.length == 0) return;

	if (this.data.uid == -1) {
		this.call('onChatMsg', null, 104, 'not login', {});
		return;
	}
	if (this.data.ban) {
		this.call('onChatMsg', null, 103, 'send msg not allow uid:' + this.data.uid, {private : true});
		return;
	};

	//命感词过滤
	var service = application.getService("ChatService", this);
	this.msgFilter_Result = function(resp) {
		if (resp.errno == -100) {//未登录
			this.call('onChatMsg', null, 104, 'not login' + this.data.uid, {private : true});
		}
		else if (resp.errno == 500) {//发言频率控制
			this.call('onChatMsg', null, 105, 'send msg not allow uid:' + this.data.uid, {private : true});
			return;
		}
		else if (resp.errno == 501) {//短时间内不能发相同内容
			this.call('onChatMsg', null, 106, 'send msg not allow uid:' + this.data.uid, {private : true});
			return;
		}
		else if (resp.errno == 502) {//被禁言
			this.call('onChatMsg', null, 107, 'send msg not allow uid:' + this.data.uid, {private : true});
			return;			
		}
		else if (resp.errno == 0) {

			msgData.msg = resp.data.msg;

			var userInfo = {};

			if (msgData.to != 0) {
				userInfo = application.getUserInfoByUid(msgData.to);
				if(!userInfo){
					mytrace('sendMsg target uid:' + msgData.to + ' userInfo not found');
					this.call("onChatMsg", null, 100, 'user not in room uid:' + msgData.to, {});
					return;
				}
			}
			else if(msgData.to == 0 || !msgData.private) {
				application.broadcastMsg("onChatMsg", 0, '', {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : msgData.to, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "msg" : msgData.msg, private : false, "timestamp" : (new Date).getTime()});
				return;
			};

			var ret = {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : userInfo.uid, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "msg" : msgData.msg, private : msgData.private, "timestamp" : (new Date).getTime()};

			this.call("onChatMsg", null, 0, '', ret);
			userInfo.client.call('onChatMsg', null, 0, '', ret);
		}

	}
	service.msgFilter(this.data.sid, this.data.uid, application.rid, msgData.msg);
}

Client.prototype.sendGift = function(propId, count, to){
	mytrace('sendGift propId:' + propId + ' count:' + count + ' to:' + to + ' from:' + this.data.uid);
	if (this.data.uid == -1) {
		this.call("onGiftMsg", null, 201, 'not login', {});
		return;
	}
	var userInfo = application.getUserInfoByUid(to);
	if(!userInfo){
		mytrace('sendGift target uid:' + to + ' userInfo not found');
		this.call("onGiftMsg", null, 200, 'user not in room uid:' + to, {});
		return;
	}
	var service = application.getService("ChatService", this);
	this.sendGift_Result = function(resp){
		if(resp.errno) {
			this.call("onGiftMsg", null, resp.errno, resp.msg, {});
			return;
		}
		application.broadcastMsg("onGiftMsg", 0, '',  {"from" : this.data.uid, "fromNickname" : this.data.nickname, "fromHeadPic" : this.data.headPic, "to" : to, "toNickname" : userInfo.nickname, "toHeadPic" : userInfo.headPic, "propId": propId, "propName" : resp.data.propName,  "propPic" : resp.data.propPic, "count" : count, "showProp" : resp.data.showProp, "time" : resp.data.time});
	};
	this.sendGift_Status = function(info) {
		mytrace('sendGitf_Status level:' + info.level + ' description:' + info.description);
	};
	service.sendGift(application.rid, this.data.sid, this.data.uid, to, propId, count);
}

Client.prototype.ban = function(buid){
	var userInfo = application.getUserInfoByUid(buid);
	if(!userInfo){
		mytrace('sendGift target uid:' + buid + ' userInfo not found');
		this.call("onBanMsg", null, 300, 'user not in room uid:' + buid, {});
		return;
	}

	userInfo.data.ban = true;

	var conn = NetServices.createGatewayConnection();
	var service = conn.getService("ChatService", this);
	this.ban_Result = function(resp){
		if(resp.errno){
			this.call("onBanMsg", null, 301, resp.msg, {uid : buid, nickname : userInfo.nickname, headPic : userInfo.headPic});
		}
		else{
			this.call("onBanMsg", null, 0, '' , {uid : buid, nickname : userInfo.nickname, headPic : userInfo.headPic});
		}
	};
	this.ban_Status = function(info){
		mytrace('ban_Status level' + info.level + ' description:' + info.description);
	};
	service.ban(this.data.sid, this.data.uid, application.rid, buid);
}

Client.prototype.checkVideo = function() {
	this.call('onCheckVideo', null, application.isPlaying);
}

application.getUserList = function() {
	var ret = [];
	for (var uid in this.loginUsers) {
		ret.push(this.loginUsers[uid].data);
	}
	//未登录用户
	for (var i = 0; i < this.clients.length; i++) {
		if (this.clients[i].data.uid == -1) {
			ret.push(this.clients[i].data);
		};
	}
	return ret;
}
